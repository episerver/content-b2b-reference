@using EPiServer.Web.Mvc.Html
@using Microsoft.AspNetCore.Http.Extensions
@model Sample.Models.ViewModels.OrderDetailsPageViewModel
@{
    Layout = "~/Features/MyAccount/_SidebarLayout.cshtml";
}
<div class="mx-auto px-4">
    @Html.PropertyFor(x => x.CurrentContent.MainBody)
    @Html.PropertyFor(x => x.CurrentContent.MainContentArea)
    <div class="bg-white rounded-lg p-2 sm:p-5 border-2 m-5">
        <span class="block text-xl font-semibold pb-4">Order Status</span>
        <div class="flex justify-between items-center w-4/5 mx-auto gap-2 pb-5">
            <div class="relative flex justify-center">
                <div class="flex justify-center items-center bg-green-500 text-current h-8 w-8 rounded-full transition-all-300">
                    <i class="fa fa-clipboard-check flex"></i>
                </div>
                <span class="absolute text-sm hidden sm:block bottom-[-25px] whitespace-nowrap">Order Received</span>
            </div>
            <div class="relative bg-green-500 rounded-full h-2 w-full overflow-hidden">
                <div class="absolute bg-green-500 rounded-full h-full w-full transition-all-300"></div>
            </div>
            <div class="relative flex justify-center">
                <div class="flex justify-center items-center bg-green-500 text-current h-8 w-8 rounded-full transition-all-300 active">
                   <i class="fa fa-box flex"></i>
                </div>
                <span class="absolute text-sm hidden sm:block bottom-[-25px] whitespace-nowrap">Preparing order</span>
            </div>
            
            <div class="@($"relative {(Model.Order.Equals("Complete") || Model.Order.Equals("Completed") ? "bg-green-500" : "bg-gray-200")} rounded-full h-2 w-full overflow-hidden")">
                <div class="absolute bg-green-500 rounded-full h-full w-0 transition-all-300"></div>
            </div>
            <div class="step-number relative flex justify-center">
                <div class="@($"flex justify-center items-center  {(Model.Order.Equals("Complete") || Model.Order.Equals("Completed") ? "bg-green-500" : "bg-gray-200")} text-current h-8 w-8 rounded-full transition-all-300")">
                    <i class="fa fa-truck flex"></i>
                    <span class="absolute text-sm hidden sm:block bottom-[-25px] whitespace-nowrap">On the way</span>
                </div>
            </div>
            <div class="@($"relative {(Model.Order.Equals("Complete") || Model.Order.Equals("Completed") ? "bg-green-500" : "bg-gray-200")} rounded-full h-2 w-full overflow-hidden")">
                <div class="absolute bg-green-500 rounded-full h-full w-0 transition-all-300"></div>
            </div>
            <div class="step-number relative flex justify-center">
                <div class="@($"flex justify-center items-center  {(Model.Order.Equals("Complete") || Model.Order.Equals("Completed") ? "bg-green-500" : "bg-gray-200")} text-current h-8 w-8 rounded-full transition-all-300")">
                    <i class="fa fa-check flex"></i>
                    <span class="absolute text-sm hidden sm:block bottom-[-25px] whitespace-nowrap">Delivered Order</span>
                </div>
            </div>
        </div>
    </div>
    <div class="flex flex-wrap md:justify-between md:flex-nowrap space-x-2 mb-6">
        <a class="px-4 py-3 mb-2 inline-block text-lg w-full text-center font-medium  text-gray-700 bg-white shadow-sm border border-gray-200 rounded-md hover:bg-gray-100 hover:text-blue-600"
           href="#"> Email </a>
        <a class="px-4 py-3 mb-2 inline-block text-lg w-full text-center font-medium  text-gray-700 bg-white shadow-sm border border-gray-200 rounded-md hover:bg-gray-100 hover:text-blue-600"
           href="@(Html.GetPageReferenceUrl<PageReferenceSettings>(x => x.ChecoutPage) + "?step=address")"> Print </a>
        <a class="px-4 py-3 mb-2 inline-block text-lg w-full text-center font-medium  text-gray-700 bg-white shadow-sm border border-gray-200 rounded-md hover:bg-gray-100 hover:text-blue-600"
           href="@(Html.GetPageReferenceUrl<PageReferenceSettings>(x => x.ChecoutPage) + "?step=address")"> Return Request </a>
        <a class="px-4 py-3 mb-2 inline-block text-lg w-full text-center font-medium  text-gray-700 bg-white shadow-sm border border-gray-200 rounded-md hover:bg-gray-100 hover:text-blue-600"
           href="@(Html.GetPageReferenceUrl<PageReferenceSettings>(x => x.ChecoutPage) + "?step=address")"> Cancel </a>
        <a class="px-4 py-3 mb-2 inline-block text-lg w-full text-center font-medium  text-gray-700 bg-white shadow-sm border border-gray-200 rounded-md hover:bg-gray-100 hover:text-blue-600"
           href="@(Html.GetPageReferenceUrl<PageReferenceSettings>(x => x.ChecoutPage) + "?step=address")"> Reorder </a>
    </div>
    <div class="flex flex-col md:flex-row gap-4 lg:gap-8">
        <div class="md:w-1/2">
            <h3 class="text-xl text-center font-semibold mb-4">Order Summary - @Model.Order.WebOrderNumber</h3>
             <div class="grid md:grid-cols-2 gap-x-2">
                <div class="md:col-span-1 mb-4">
                    <h4 class="text-lg font-semibold mb-4">Shipping Information</h4>
                    <address class="mb-2">
                        <p>@Model.Order?.STCompanyName</p>
                        <p>@Model.Order?.STAddress1</p>
                        @if (!string.IsNullOrEmpty(Model.Order?.STAddress2))
                        {
                            <p>@Model.Order.STAddress2</p>
                        }
                        <p>@Model.Order?.ShipToCity, @Model.Order?.ShipToState, @Model.Order?.ShipToPostalCode, @Model.Order.STCountry </p>
                    </address>
                    <h4 class="text-lg font-semibold mb-1">Carrier</h4>
                    <label class="block mb-1"> @Model.Order.ShipViaDescription </label>
                </div>
                <div class="md:col-span-1 mb-4">
                    <h4 class="text-lg font-semibold mb-4">Billing Information</h4>
                    <address>
                        <p>@Model.Order?.BTCompanyName</p>
                        <p>@Model.Order?.BTAddress1</p>
                        @if (!string.IsNullOrEmpty(Model.Order?.BTAddress2))
                        {
                            <p>@Model.Order?.BTAddress2</p>
                        }
                        <p>@Model.Order?.BillToCity, @Model.Order?.BillToState, @Model.Order?.BillToPostalCode, @Model.Order.BTCountry </p>
                    </address>
                </div>
            </div>
            @foreach (var line in Model.Order?.OrderLines ?? new List<OrderLine>())
            {
                 <div class="flex flex-wrap lg:flex-row gap-5  mb-4">
				    <div class="w-full lg:w-2/5 xl:w-2/4">
					    <figure class="flex leading-5">
						    <div>
							    <div class="block w-16 h-16 rounded border border-gray-200 overflow-hidden">
								    <img src="@line.MediumImagePath" alt="@line.AltText" />
							    </div>
						    </div>
						    <figcaption class="ml-3">
							    <p><a href="@($"/{Model.CurrentContent.Language}/{@line.ProductUri}")" class="hover:text-blue-600">@line.ShortDescription </a></p>
							    <p class="mt-1 text-gray-400"> Item # @line.ManufacturerItem </p>
                                @if (line.Brand != null)
                                {
                                    <p>
                                        <a href="@(Html.GetPageReferenceUrl<PageReferenceSettings>(x => x.BrandsDetailPage) + $"brand={line.Brand.Id}")">
                                            @line.Brand.Name
                                        </a>
                                    </p>
                                }
						    </figcaption>
					    </figure>
				    </div>
				    <div>
				        @line.QtyOrdered.ToString("f0")
				    </div>
				    <div>
					    <div class="leading-5">
						    <p class="font-semibold not-italic">@line.ExtendedUnitNetPriceDisplay</p>
						    <small class="text-gray-400"> @line.UnitNetPriceDisplay / @line.UnitOfMeasureDisplay </small> 
					    </div>
				    </div>
				    <div class="flex-auto">
					    <div class="float-right">
						    <a href="#" class="px-3 py-2 inline-block text-blue-600 bg-blue-100 border border-transparent rounded-md hover:bg-blue-200"> 
                                Add To List
                            </a>
					    </div>
				    </div>
			    </div>
            }
        </div>
        <div class="md:w-1/2">
             <h3 class="text-xl text-center font-semibold mb-4">Order Totals</h3>
            <ul class="mb-5">
                <li class="flex justify-between text-gray-600  mb-1">
                    @Html.PropertyFor(x => x.CurrentContent.OrderSubtotalLabel, new { CustomTag = "span"}):
                    <span>@Model.Order?.OrderSubTotalDisplay</span>
                </li>
                @if ((Model.Order?.OrderPromotions?.Count ?? 0) > 0)
                {
                    foreach (var promotion in Model.Order.OrderPromotions)
                    {
                        <li class="flex justify-between text-gray-600  mb-1">
                            <span>@promotion.Name</span>
                            <span class="text-green-500">- $@promotion.AmountDisplay</span>
                        </li>
                    }
                }
                <li class="flex justify-between text-gray-600  mb-1">
                    @Html.PropertyFor(x => x.CurrentContent.ShippingHandlingLabel, new { CustomTag = "span"}):
                    <span>@Model.Order?.ShippingAndHandlingDisplay</span>
                </li>
                <li class="flex justify-between text-gray-600  mb-1">
                    @Html.PropertyFor(x => x.CurrentContent.TaxLabel, new { CustomTag = "span"}):
                    <span>@Model.Order?.TotalTaxDisplay</span>
                </li>
                <li class="text-lg font-bold border-t flex justify-between mt-3 pt-3">
                    @Html.PropertyFor(x => x.CurrentContent.TotalLabel, new { CustomTag = "span"}):
                    <span>@Model.Order?.OrderGrandTotalDisplay</span>
                </li>
                @if ((Model.Order?.OrderPromotions?.Count ?? 0) > 0)
                {
                    <li class="text-lg font-bold border-t flex justify-between mt-3 pt-3">
                        <span>@Model.CurrentContent.PromotionLabel:</span>
                        <span>You saved @Model.Order.OrderPromotions.Sum(x => (x.Amount ?? 0)).ToString("f2")</span>
                    </li>
                }
            </ul>
            @Html.PropertyFor(x => x.CurrentContent.MainContentArea)
        </div>
    </div>
</div>